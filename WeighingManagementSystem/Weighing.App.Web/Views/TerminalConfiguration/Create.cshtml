@model Weighing.App.Web.ViewModels.TerminalConfigurationViewModel

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using (Html.BeginForm())
{
<div class="page-toolbar">

    <div class="page-toolbar-block">
		<div class="page-toolbar-title">@ViewBag.FormName</div>
        <div class="page-toolbar-subtitle">@ViewBag.FormDescription</div>
    </div>
	
	@* === WEBSITE PATH === *@
    @*<ul class="breadcrumb">
        <li><a href="#">@ViewBag.FormName</a></li>
        <li class="active">@ViewBag.ViewName</li>
    </ul>*@
	
	@* === BUTTON FORM === *@
    <div class="page-toolbar-block pull-right">
        <div class="widget-info widget-from">
            <button type="submit" class="btn btn-success"><i class="fa fa-save"></i> Save</button>
            <a class="btn btn-danger" href="@Url.Content("~/YourController/Index")"><i class="fa fa-power-off"></i> Cancel</a>
        </div>
    </div>
</div>
	


<div class="row">
    <div class="col-md-12">
        <div class="block">
            <div class="block-head">
                <h2>Add New @ViewBag.FormName</h2>
            </div>
            <div class="block-content controls">
            @using (Html.BeginForm()) 
            {
            @Html.AntiForgeryToken()
	
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="row-form">
		            <div class="col-md-3">
			            <strong>
                        @Html.LabelFor(model => model.TerminalId, htmlAttributes: new { @class = "control-label" })
			            </strong>
		            </div>
                    <div class="col-md-9">
                        @Html.DropDownListFor(model => model.TerminalId, new SelectList(ViewBag.TerminalId as IEnumerable<SelectListItem>, "Value", "Text"), "Select One")
                        @Html.ValidationMessageFor(model => model.TerminalId, "", new { @class = "text-danger" })
                    </div>
                </div>

                @*<div class="row-form">
		            <div class="col-md-3">
			            <strong>
                        @Html.LabelFor(model => model.TerminalCategory, htmlAttributes: new { @class = "control-label" })
			            </strong>
		            </div>
                    <div class="col-md-9">
                        @Html.DropDownList("TerminalCategory", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TerminalCategory, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row-form">
		            <div class="col-md-3">
			            <strong>
                        @Html.LabelFor(model => model.TerminalGroup, htmlAttributes: new { @class = "control-label" })
			            </strong>
		            </div>
                    <div class="col-md-9">
                        @Html.DropDownList("TerminalGroup", null, htmlAttributes: new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.TerminalGroup, "", new { @class = "text-danger" })
                    </div>
                </div>*@

                <div class="row-form">
		            <div class="col-md-3">
			            <strong>
                        @Html.LabelFor(model => model.TerminalDescription, htmlAttributes: new { @class = "control-label" })
			            </strong>
		            </div>
                    <div class="col-md-9">
                        @Html.TextAreaFor(model => model.TerminalDescription, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TerminalDescription, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row-form">
		            <div class="col-md-3">
			            <strong>
                        @Html.LabelFor(model => model.TerminalLocation, htmlAttributes: new { @class = "control-label" })
			            </strong>
		            </div>
                    <div class="col-md-9">
                        @Html.EditorFor(model => model.TerminalLocation, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.TerminalLocation, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="row-form">
		            <div class="col-md-3">
			            <strong>
                        @Html.LabelFor(model => model.IsAllergen, htmlAttributes: new { @class = "control-label" })
			            </strong>
		            </div>
                    <div class="col-md-9">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.IsAllergen)
                            @Html.ValidationMessageFor(model => model.IsAllergen, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="row-form">
		            <div class="col-md-3">
			            <strong>
                        @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label" })
			            </strong>
		            </div>
                    <div class="col-md-9">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.IsActive)
                            @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

		        @* === ADDITIONAL BUTTON (IF NEEDED) === *@
                <div class="row-form">
                                <div class="col-md-3">
                                    <button type="submit" class="btn btn-primary"><i class="fa fa-plus"></i> save</button>
                                </div>
                            </div>
        }
    </div>
        </div>
    </div>
</div>
}


@*This View is Auto Generate by OanTech - April 2017*@
@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
